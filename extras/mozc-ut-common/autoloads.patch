diff --git a/src/unix/emacs/mozc.el b/src/unix/emacs/mozc.el
index a315c149..8ffd16ce 100644
--- a/src/unix/emacs/mozc.el
+++ b/src/unix/emacs/mozc.el
@@ -1784,55 +1784,51 @@ The preedit method is taken from the server side configuration.")
     (and (hash-table-p keymap) keymap)))
 
 ;;;###autoload
-(defun mozc-keymap-make-keymap ()
-  "Create a new empty keymap and return it."
-  (make-hash-table :size 128 :test #'eq))
+(progn
+  (defun mozc-keymap-make-keymap ()
+    "Create a new empty keymap and return it."
+    (make-hash-table :size 128 :test #'eq))
 
-;;;###autoload
-(defun mozc-keymap-make-keymap-from-flat-list (list)
-  "Create a new keymap and fill it with entries in LIST.
+  (defun mozc-keymap-make-keymap-from-flat-list (list)
+    "Create a new keymap and fill it with entries in LIST.
 LIST must be a flat list which contains keys and mapped strings alternately."
-  (mozc-keymap-fill-entries-from-flat-list (mozc-keymap-make-keymap) list))
+    (mozc-keymap-fill-entries-from-flat-list (mozc-keymap-make-keymap) list))
 
-;;;###autoload
-(defun mozc-keymap-fill-entries-from-flat-list (keymap list)
-  "Fill KEYMAP with entries in LIST and return KEYMAP.
+  (defun mozc-keymap-fill-entries-from-flat-list (keymap list)
+    "Fill KEYMAP with entries in LIST and return KEYMAP.
 KEYMAP must be a key table from keycodes to mapped strings.
 LIST must be a flat list which contains keys and mapped strings alternately."
-  (if (not (and (car list) (cadr list)))
-      keymap  ; Return the keymap.
-    (mozc-keymap-put-entry keymap (car list) (cadr list))
-    (mozc-keymap-fill-entries-from-flat-list keymap (cddr list))))
+    (if (not (and (car list) (cadr list)))
+        keymap                          ; Return the keymap.
+      (mozc-keymap-put-entry keymap (car list) (cadr list))
+      (mozc-keymap-fill-entries-from-flat-list keymap (cddr list))))
 
-;;;###autoload
-(defun mozc-keymap-get-entry (keymap keycode &optional default)
-  "Return a mapped string if the entry for the keycode exists.
+  (defun mozc-keymap-get-entry (keymap keycode &optional default)
+    "Return a mapped string if the entry for the keycode exists.
 Otherwise, the default value, which must be a string.
 KEYMAP must be a key table from keycodes to mapped strings.
 KEYCODE must be an integer representing a key code to look up.
 DEFAULT is returned if it's a string and no entry for KEYCODE is found."
-  (let ((value (and (hash-table-p keymap)
-                    (gethash keycode keymap default))))
-    (and (stringp value) value)))
+    (let ((value (and (hash-table-p keymap)
+                      (gethash keycode keymap default))))
+      (and (stringp value) value)))
 
-;;;###autoload
-(defun mozc-keymap-put-entry (keymap keycode mapped-string)
-  "Add a new key mapping to a keymap.
+  (defun mozc-keymap-put-entry (keymap keycode mapped-string)
+    "Add a new key mapping to a keymap.
 KEYMAP must be a key table from keycodes to mapped strings.
 KEYCODE must be an integer representing a key code.
 MAPPED-STRING must be a string representing a preedit string to be inserted."
-  (when (and (hash-table-p keymap)
-             (integerp keycode) (stringp mapped-string))
-    (puthash keycode mapped-string keymap)
-    (cons keycode mapped-string)))
+    (when (and (hash-table-p keymap)
+               (integerp keycode) (stringp mapped-string))
+      (puthash keycode mapped-string keymap)
+      (cons keycode mapped-string)))
 
-;;;###autoload
-(defun mozc-keymap-remove-entry (keymap keycode)
-  "Remove an entry from a keymap.  If no entry for keycode exists, do nothing.
+  (defun mozc-keymap-remove-entry (keymap keycode)
+    "Remove an entry from a keymap.  If no entry for keycode exists, do nothing.
 KEYMAP must be a key table from keycodes to mapped strings.
 KEYCODE must be an integer representing a key code to remove."
-  (when (hash-table-p keymap)
-    (remhash keycode keymap)))
+    (when (hash-table-p keymap)
+      (remhash keycode keymap))))
 
 ;;;###autoload
 (defvar mozc-keymap-kana-106jp
@@ -1961,6 +1957,7 @@ CONDITIONS is a list of error conditions and shouldn't include symbol `error',
 
 (require 'mule nil t)
 
+;;;###autoload
 (defun mozc-leim-activate (input-method)
   "Activate function `mozc-mode' via LEIM.
 INPUT-METHOD is not used."
@@ -1982,24 +1979,26 @@ This indicator is not shown when you don't use LEIM."
                  (string :tag "Show an indicator"))
   :group 'mozc)
 
-(defun mozc-leim-register-input-method ()
-  "Register function `mozc-mode' as an input method of LEIM.
+;;;###autoload
+(progn
+  (defun mozc-leim-register-input-method ()
+    "Register function `mozc-mode' as an input method of LEIM.
 Do nothing if LEIM is not available."
-  (if (fboundp #'register-input-method)
-      (register-input-method
-       "japanese-mozc"
-       "Japanese"
-       #'mozc-leim-activate
-       mozc-leim-title
-       "Japanese input method with Mozc.")))
-
-;; Register mozc-mode as an input method after the init file has been read
-;; so the user has a chance to specify `mozc-leim-title' in the init file
-;; after loading this file.
-(add-hook 'emacs-startup-hook #'mozc-leim-register-input-method)
-;; In the case that `emacs-startup-hook' has already been run, especially
-;; when the user loads this file interactively, register immediately.
-(mozc-leim-register-input-method)
+    (if (fboundp #'register-input-method)
+        (register-input-method
+         "japanese-mozc"
+         "Japanese"
+         #'mozc-leim-activate
+         mozc-leim-title
+         "Japanese input method with Mozc.")))
+
+  ;; Register mozc-mode as an input method after the init file has been read
+  ;; so the user has a chance to specify `mozc-leim-title' in the init file
+  ;; after loading this file.
+  (add-hook 'emacs-startup-hook #'mozc-leim-register-input-method)
+  ;; In the case that `emacs-startup-hook' has already been run, especially
+  ;; when the user loads this file interactively, register immediately.
+  (mozc-leim-register-input-method))
 
 
 
