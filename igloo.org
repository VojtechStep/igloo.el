#+TITLE: Igloo - The Emacs Glue
#+AUTHOR: VojtechStep
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle init.el

* About
#+begin_quote
/History is scraps of evidence joined by the glue of imagination/
#+end_quote
â€‹- First image on duckduckgo for the query "famous glue quote"

This repo is my literate Emacs configuration. If you are unfamiliar with what literate programming is, basically every code snippet in this file gets yoinked out and put into the =init.el= file, which then serves as an init script for Emacs. Writing the configuration in an org file allows for (in my opinion) better documentation and organization.

To achieve the best performance, the configuration requires a build step.

Running =make= will collect all the code into =init.el= (and =early-init.el=, more on that later) and byte compile it. Once I get my hands dirty with [[https://www.emacswiki.org/emacs/GccEmacs][native compilation]], I hope to make use of it too. It will also initialize the package manager and pull all dependencies, so if you add any remote packages, it will require an internet connection.

Running =make install= will put the compiled and source files into =$PREFIX/emacs/= (PREFIX is =build= by default). If you want to OVERWRITE your existing configuration, you can use =make install PREFIX=$HOME/.config=. This does NO BACKUP. Use at your own risk.

Here's a cherry-picked list of some of the packages I use:
- [[https://github.com/emacs-evil/evil][evil-mode]] for Vim keybindings
- [[https://github.com/emacs-evil/evil-collection][evil-collection]] to get Vim keybindings where they ain't
- [[https://github.com/raxod502/straight.el][straight.el]] for package management
- [[https://github.com/jwiegley/use-package][use-package]] for package configuration
- [[https://github.com/noctuid/general.el][general.el]] for keybinding management
- [[https://github.com/bbatsov/projectile/][projectile]] for project management
- [[https://github.com/raxod502/selectrum][selectrum]] for incremental narrowing
- [[https://github.com/magit/magit][Magit]] for interfacing with Git
- [[https://github.com/skk-dev/ddskk][ddskk]] for Japanese input
- [[https://github.com/company-mode/company-mode][company-mode]] for completion
- [[https://github.com/djcb/mu][mu4e]] for mail
- [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] for smart code completion and navigation
- [[https://github.com/flycheck/flycheck][flycheck]] for error reporting
- [[https://github.com/raxod502/apheleia][apheleia]] for code formatting
- [[https://www.gnu.org/software/emacs/erc.html][ERC]] as an IRC client
- [[https://github.com/skeeto/elfeed][elfeed]] as an RSS reader

** Dependencies

* Process

First thing in the file is going to be the file header. It's useful to
add a little description and enable lexical binding (it's all the rage
these days).

#+begin_src emacs-lisp
;;; Igloo --- The glue connecting my whole operating experience. YMMV -*- lexical-binding: t; -*-

;;; Commentary:
;; Read https://github.com/VojtechStep/igloo.el/blob/master/igloo.org
;;
;; DO NOT CHANGE THIS FILE
;; This file is generated from `igloo.org' and will be overwritten on
;; every invocation of `make'

;;; Code:
#+end_src

This configuration is built on the simple principle of "do what you
can at compile time". This means that we have to properly
differentiate what happens at comptime (via `eval-when-compile`), what
happens at runtime (via plain forms) and what happens during both (via
`eval-and-compile`).

To look up if we are executing in compilation or not, we set a variable to true only during compilation:

#+begin_src emacs-lisp
(eval-and-compile
  (defvar vs/--compiling nil
    "Non-nill if read when compiling."))

(eval-when-compile
  (setq vs/--compiling t))
#+end_src

First, the package manager is installed and configured at compile
time. At runtime, we only load it via its entry point, the bootstrap
file.

The =use-package= clauses need to be evaluated at both comptime, to
clone and build the packages, and at runtime to expose them to the
system.

For this reason, we define a macro to substitute the =(use-package ...)=
form with.

#+begin_src emacs-lisp
(eval-when-compile
  (defmacro vs/use-package (&rest body)
    "Passes BODY to `use-package' and call it at comptime and runtime."
    `(eval-and-compile
       ,(cons 'use-package body))))
#+end_src

* Initialization

** Early init
:PROPERTIES:
:header-args: :tangle early-init.el
:END:


*** Startup Optimizations


*** Early visual stuff

** Package management

** UI/UX

* Email
* Org
** Exports
** Code blocks

* Development


#+begin_src emacs-lisp
(provide 'init)
;;; init.el ends here
#+end_src
